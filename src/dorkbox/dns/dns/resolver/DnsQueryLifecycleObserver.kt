/*
 * Copyright 2021 dorkbox, llc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dorkbox.dns.dns.resolver

import dorkbox.dns.dns.records.DnsMessage
import io.netty.channel.ChannelFuture
import io.netty.util.internal.UnstableApi
import java.net.InetSocketAddress

/**
 * This interface provides visibility into individual DNS queries. The lifecycle of an objects is as follows:
 *
 *  1. Object creation
 *  1. [.queryCancelled]
 *
 * OR
 *
 *  1. Object creation
 *  1. [.queryWritten]
 *  1. [.queryRedirected] or [.queryCNAMEd] or
 * [.queryNoAnswer] or [.queryCancelled] or
 * [.queryFailed] or [.querySucceed]
 *
 *
 *
 * This interface can be used to track metrics for individual DNS servers. Methods which may lead to another DNS query
 * return an object of type [DnsQueryLifecycleObserver]. Implementations may use this to build a query tree to
 * understand the "sub queries" generated by a single query.
 */
@UnstableApi
interface DnsQueryLifecycleObserver {
    /**
     * The query has been written.
     *
     * @param dnsServerAddress The DNS server address which the query was sent to.
     * @param future The future which represents the status of the write operation for the DNS query.
     */
    fun queryWritten(dnsServerAddress: InetSocketAddress, future: ChannelFuture)

    /**
     * The query may have been written but it was cancelled at some point.
     *
     * @param queriesRemaining The number of queries remaining.
     */
    fun queryCancelled(queriesRemaining: Int)

    /**
     * The query has been redirected to another list of DNS servers.
     *
     * @param nameServers The name servers the query has been redirected to.
     *
     * @return An observer for the new query which we may issue.
     */
    fun queryRedirected(nameServers: List<InetSocketAddress>): DnsQueryLifecycleObserver

    /**
     * The query returned a CNAME which we may attempt to follow with a new query.
     *
     *
     * Note that multiple queries may be encountering a CNAME. For example a if both [DnsRecordType.AAAA] and
     * [DnsRecordType.A] are supported we may query for both.
     *
     * @param cnameQuestion the question we would use if we issue a new query.
     *
     * @return An observer for the new query which we may issue.
     */
    fun queryCNAMEd(cnameQuestion: DnsMessage): DnsQueryLifecycleObserver

    /**
     * The response to the query didn't provide the expected response code, but it didn't return
     * [DnsResponseCode.NXDOMAIN] so we may try to query again.
     *
     * @param code the unexpected response code.
     *
     * @return An observer for the new query which we may issue.
     */
    fun queryNoAnswer(code: Int): DnsQueryLifecycleObserver

    /**
     * The following criteria are possible:
     *
     *  * IO Error
     *  * Server responded with an invalid DNS response
     *  * Server responded with a valid DNS response, but it didn't progress the resolution
     *
     *
     * @param cause The cause which for the failure.
     */
    fun queryFailed(cause: Throwable)

    /**
     * The query received the expected results.
     */
    fun querySucceed()
}
